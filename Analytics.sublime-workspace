{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"er",
				"er	embed ruby ERB"
			],
			[
				"ass",
				"assets"
			],
			[
				"slides",
				"slides_total"
			],
			[
				"slide",
				"slide_current"
			],
			[
				"fu",
				"function"
			]
		]
	},
	"buffers":
	[
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 469,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "class VoterActionsReport\n  attr_accessor :items\n\n  # set up the report generation, probably using the helper method\n  def initialize(attr = {})\n    # read in params, set attrs\n  end\n\n  # create the report when so commanded\n  def generate(format,period)\n\n    # use the provided method to get the rows on which to report\n    # this gets voters within the specified period\n    votersInPeriod = ReportsHelper.get_report_items(period)\n\n    # do the actual processing\n    retval = ''       # what we return\n\n\n    accumVtrActions, accumVtrForms, accumVtrNoteTypes  = {other: 0}# where we accumulate data to report\n    accumArray = [accumVtrActions, accumVtrForms, accumVtrNoteTypes]; #where we will put all the different accums\n\n    #can we DRY this up?\n\n    #Here is where to insert new logic!\n    votersInPeriod.each do |vtr|\n      accumArray.each do |accum|\n\n        # make sure we have Action accum\n        if accum == accumVtrActions\n          #if there is no action, put in other category\n          if vtr.action.nil? \n            accum[:other] += 1\n            #if it already has the key, add to tally\n          elsif accum.has_key?(vtr.action) \n            accum[vtr.action] += 1 \n            #otherwise create category and set it to 0\n          else \n            accum[vtr.action] = 0 \n          end\n\n        elsif accum == accumVtrForms\n          logger.debug \"accum: #{accum.inspect}\"#should print to log\n          if vtr.form.nil? \n            accum[:other] += 1\n          elsif accum.has_key?(vtr.form) #Being called on nil object :(\n            accum[vtr.form] += 1 \n          else \n            accum[vtr.form] = 0 \n          end\n\n        elsif accum == accumVtrNoteTypes\n          if vtr.formNote.nil? \n            accum[:other] += 1\n          elsif accum.has_key?(vtr.formNote) \n            accum[vtr.formNote] += 1 \n          else \n            accum[vtr.formNote] = 0 \n          end\n\n        else puts \"invalid accum in VoterActionsReport::generate\"\n        end\n      end\n    end\n\n    # send the processed data to the appropriate output routine\n    if format == 'html'\n      return html_output(accumVtrActions, accumVtrForms, accumVtrNoteTypes)\n    end\n    if format == 'csv'\n      return csv_output(accumVtrActions, accumVtrForms, accumVtrNoteTypes)\n    end\n\n    return \"Programming error in report generation\"\n  end\n\n\n  # create the HTML version of the report and display it in the browser\n  # let's modify this so that it can take multiple hashes (one for action, one for form, etc.)\n  def html_output(*accums)\n    #actually, should be a combo of different functions\n    retval = ''#HTML string to return\n    # place in 2 headers for each accum starting at the first\n    headerStartIndex = 0\n    headerLength = 2 #currently Action, numActions, %total\n    accums.each do |accum| \n      retval += makeHtmlTable(accum, headerStartIndex, headerLength, true)\n      headerLength +=2\n    end\n    # return the formatted HTML\n    retval\n  end\n\n  # let's make this also do percentages\n  # we'll modify the accum to have an array for the key that holds the value and it's percent of total\n  def calcAccumPercentages(accum)\n    total = 0\n    # once through to sum total from values\n    accum.each do |k, v| total += v\n      # another time to do the percentage, creating an array of [value, percentage] in place of previous value\n      accum.each { |k, v| v = [v, v / total * 100] }\n    end\n  end\n\n  def makeHtmlTable(accum, headerStartIndex, numHeaders, displayPercentages)\n    calcAccumPercentages(accum) if displayPercentages #boolean\n\n    # set basic table spacing and padding\n    retval = '<table cellspacing=\"3\" cellpadding=\"3\">'\n    # linefeed, tr = row, th = header cell (in this case, the first one which is empty)\n    retval += \"\\n<tr><th></th>\"\n    # output the column headers\n    # I18n is internationaliztion gem for translation\n    # .t looks up the translation, in this case for column_headers(comes from locales/reports/voter_actions.yml)\n    # then iterates through\n    I18n.t('VoterActionsReport.column_headers').slice(headerStartIndex, numHeaders).each do |header|\n      # adds in the table headers\n      retval += \"<th>#{header}</th>\"\n      retval += \"<th>Percent Total</th>\" if displayPercentages\n    end\n    # end tag for the table row\n    retval += \"\\n</tr>\\n\"\n    # background\n    bg = ''\n    count = 0\n    # sort_by: Sorts self in place using a set of keys generated by mapping the values in self through the given block.\n    # I think it orders by value smallest to largest\n    # then places in alternating lightgrey and white bgs\n    accum.sort_by {|k,v| v}.reverse.each do |k,v|\n      count += 1\n      if bg.blank?\n        bg = 'lightgrey'\n      else\n        bg = ''\n      end\n\n      #count is the index in table, k is the row key\n      retval +=\"<tr bgcolor=\\\"#{bg}\\\"><td align=\\\"right\\\">#{count}</td><td>#{k}</td>\"\n      retval +=\"<td align=\\\"right\\\">#{v[0]}</td></tr>\\n\" \n      retval +=\"<td align=\\\"right\\\">#{v[1]}</td></tr>\\n\" if displayPercentages\n\n    end\n    # closes table\n    retval += \"</table>\\n\"\n\n    retval #return formatted html\n  end\n\n  # create the CSV version of the report and download it to the client\n  # TODO: add support for percentages and multiple tables!\n  def csv_output(accum)\n\n    # some day the user id will be added to the filename so that it really works\n    # guessing this creates a new file?\n    fn = Rails.root.join('public','data','VoterActionsReport.csv')\n    # opent the new file (w means write only)\n    csv = File.open(fn,\"w\")\n\n    # output the column headers\n    hdrs = Array.new\n    I18n.t('VoterActionsReport.column_headers').each do |h|\n      # puts header on end of hdrs array, for some reason with triple parens\n      hdrs.push('\"' + h + '\"')\n    end\n    # puts all the headers at the end of the file\n    csv.puts hdrs.join(',')\n\n    # output the corresponding data\n    accum.each do |k,v|\n      csv.puts \"#{k},#{v}\"\n    end\n\n    csv.close\n    # will place a link to the csv file???\n    ActionController::Base.helpers.link_to \"CSV\",\"/data/VoterActionsReport.csv\"\n  end\nend\n",
			"file": "app/reports/voter_actions_report.rb",
			"file_size": 6028,
			"file_write_time": 130591843140000000,
			"settings":
			{
				"buffer_size": 6048,
				"line_ending": "Unix"
			}
		},
		{
			"file": "log/development.log",
			"settings":
			{
				"buffer_size": 3437315,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config/locales/reports/voter_actions.yml",
			"settings":
			{
				"buffer_size": 546,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/gavinrea/Dropbox/Analytics/vtl_schema_v4_4_BFH.xsd",
			"settings":
			{
				"buffer_size": 6787,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 47.0,
		"selected_items":
		[
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/gavinrea/Ruby Projects/Analytics",
		"/Users/gavinrea/Ruby Projects/Analytics/app",
		"/Users/gavinrea/Ruby Projects/Analytics/app/models",
		"/Users/gavinrea/Ruby Projects/Analytics/app/reports",
		"/Users/gavinrea/Ruby Projects/Analytics/config",
		"/Users/gavinrea/Ruby Projects/Analytics/config/locales/reports",
		"/Users/gavinrea/Ruby Projects/Analytics/db/fixtures",
		"/Users/gavinrea/Ruby Projects/Analytics/log"
	],
	"file_history":
	[
		"/Users/gavinrea/Ruby Projects/pinteresting/app/assets/stylesheets/application.css.scss",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/models/pin.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/Gemfile",
		"/Users/gavinrea/Ruby Projects/pinteresting/config/environments/production.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/pins/_form.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/controllers/pins_controller.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/assets/javascripts/application.js",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/layouts/application.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/pins/show.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/pins/index.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/public/404.html",
		"/Users/gavinrea/Ruby Projects/pinteresting/test/helpers/pages_helper_test.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/pages/home.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/.gitignore",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/controllers/application_controller.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/config/application.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/controllers/pages_controller.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/models/.keep",
		"/Users/gavinrea/Ruby Projects/pinteresting/tmp/cache/assets/development/sass/9714f5aa81f16836ef06d4fca0b69ecea39f1de9/_modals.scssc",
		"/Users/gavinrea/Ruby Projects/pinteresting/config/initializers/mime_types.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/test/fixtures/pins.yml",
		"/Users/gavinrea/Ruby Projects/pinteresting/pinteresting.sublime-project",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/models/user.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/pages/_ajax.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/config/routes.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/db/schema.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/db/migrate/20141023193157_create_pins.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/layouts/_header.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/devise/registrations/new.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/devise/sessions/new.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/assets/stylesheets/scaffolds.css.scss",
		"/Users/gavinrea/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/pages/about.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/config/environments/development.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/layouts/_googleAnalytics.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/views/layouts/_mixedpanel.html.erb",
		"/Users/gavinrea/Ruby Projects/pinteresting/config/initializers/devise.rb",
		"/Users/gavinrea/Ruby Projects/pinteresting/config.ru",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/assets/stylesheets/bootstrap_and_customization.css.scss",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/assets/stylesheets/pages.css.scss",
		"/Users/gavinrea/Ruby Projects/pinteresting/app/assets/stylesheets/application.css",
		"/Users/gavinrea/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/gavinrea/Documents/ruby class example.rb",
		"/Users/gavinrea/Analytics/db/fixtures/voter_actions.yml",
		"/Users/gavinrea/Analytics/app/reports/voter_actions_report.rb",
		"/Users/gavinrea/Analytics/app/helpers/reports_helper.rb",
		"/Users/gavinrea/Analytics/app/models/vtr.rb",
		"/Users/gavinrea/Analytics/app/models/data_file.rb",
		"/Users/gavinrea/Analytics/Gemfile",
		"/Users/gavinrea/Analytics/data/test-xml/fail-1.txt",
		"/Users/gavinrea/Analytics/public/data",
		"/Users/gavinrea/Analytics/db/fixtures/uniquevoters.yml",
		"/Users/gavinrea/Analytics/config/locales/reports/unique_voters.yml",
		"/Users/gavinrea/Analytics/app/models/period.rb",
		"/Users/gavinrea/Analytics/config/routes.rb",
		"/Users/gavinrea/Analytics/config/locales/reports/voter_actions.yml",
		"/Users/gavinrea/Analytics/db/fixtures/rprocs.yml",
		"/Users/gavinrea/Analytics/app/reports/unique_voters_report1.rb",
		"/Users/gavinrea/Analytics/config/locales/reports/unique_voters1.yml",
		"/Users/gavinrea/Analytics/db/fixtures/uniquevoters1.yml",
		"/Users/gavinrea/Analytics/db/fixtures/voteractions.yml",
		"/Users/gavinrea/Analytics/db/fixtures/uniquevoters copy.yml",
		"/Users/gavinrea/Analytics/app/reports/voter_action_report.rb",
		"/Users/gavinrea/Analytics/db/fixtures/voter_action.yml",
		"/Users/gavinrea/Analytics/config/locales/reports/voter_action.yml",
		"/Users/gavinrea/Analytics/app/reports/unique_voters_report.rb",
		"/Users/gavinrea/Library/Application Support/Sublime Text 3/Packages/User/Plain text.sublime-settings",
		"/Users/gavinrea/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/gavinrea/,/Users/gavinrea/Ruby Projects/pinteresting",
			"/Users/gavinrea/Analytics/",
			"/Users/gavinrea/Analytics/data"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"accum",
			"form",
			"action",
			"Actions",
			"accumVtrActions",
			"</td>",
			"<td>",
			"js is added to application!",
			"alert",
			"added to ",
			"added",
			"description",
			"onreadystate",
			".form",
			"secret_key",
			"default",
			"GenRept",
			"genrept",
			"voteraction",
			"public/data",
			"Vtr",
			"receive",
			"submit",
			"complete"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"form"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 469,
						"regions":
						{
						},
						"selection":
						[
							[
								468,
								468
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/reports/voter_actions_report.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6048,
						"regions":
						{
						},
						"selection":
						[
							[
								1408,
								1408
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 460.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "log/development.log",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 3437315,
						"regions":
						{
						},
						"selection":
						[
							[
								3202798,
								3202803
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 938349.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "config/locales/reports/voter_actions.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 546,
						"regions":
						{
						},
						"selection":
						[
							[
								545,
								545
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/gavinrea/Dropbox/Analytics/vtl_schema_v4_4_BFH.xsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6787,
						"regions":
						{
						},
						"selection":
						[
							[
								992,
								992
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 136.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Analytics.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"html.erb",
				"app/views/layouts/application.html.erb"
			],
			[
				"pin.rb",
				"app/models/pin.rb"
			],
			[
				"pinscon",
				"app/controllers/pins_controller.rb"
			],
			[
				"page",
				"app/controllers/pages_controller.rb"
			],
			[
				"app",
				"config/application.rb"
			],
			[
				"gem",
				"Gemfile"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 225.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
